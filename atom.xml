<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>元佳の博客</title>
  
  <subtitle>点滴生活..</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-31T15:55:29.908Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yuan jia dong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>四月是你的谎言</title>
    <link href="http://yoursite.com/2020/03/31/%E5%BF%83%E6%83%85.html"/>
    <id>http://yoursite.com/2020/03/31/心情.html</id>
    <published>2020-03-31T15:41:05.000Z</published>
    <updated>2020-03-31T15:55:29.908Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><p>四月如初</p><p>人生多艰，风雨无数，幸亏一切还好。</p><p>年后的天气，多是阴晴难测，多阴多雨。身后的一大驴子的好山好水也因为这特殊的时期少了游人的眷顾。我于窗前临盼着哪天的大好时光，在翠绿的光阴下狠狠的消遣一把。<br><a id="more"></a><br>常年的怡笑怒骂，使我这性子总是不惧不惊。深山探花，酒醉寻良人，夜深敲代码，这世间无论怎样，都会寻得所爱之事，恰恰是众生万物灵魂的相通，我在这滚滚红尘的浪涛中，怡然自得，冰打不住。</p><p>疫情闹腾了4月有余，等待成了信仰。那些想见的人，有的不在了，有的因足不出户成了奢望。有些人，为了使命，奔赴于没有硝烟的战场，死生不问，无声无息。有些人，静守在光阴的屋檐，等待行将而至的春暖花开。然而春不会不来，如期而至，我国之盛事，一切惶恐不安焦虑也都是过眼云烟，最后还是山海平静，云白天蓝，桥上升烟，脚下踩钱。一切的一切终会过去，头发会脱落亦会再次重新乌黑。</p><p>人这一生，总有些磨难，世间多苦，劫难虽多，又有何惧，大笑处置，过后还不是闲谈野话，樵夫饭茶，你我闲话。</p><p>光阴有限，寸阴可贵，一刻千金。让我更懂得珍惜，以往漫不经心，闲云野鹤的我，也需要懂得感恩，懂得忍耐，学的努力，在最后的余晖里，在这艳阳的光阴下，在这杂乱不堪的曹舍里，在这红灯绿酒的小路上，好好地拼搏一下。等待行将而至的夏，送别即将离开的春。</p><p>时疫年慌诸业空，万众隔离各西东。豪拿余阴做良褚，翱于九天飞化龙。</p><hr>]]></content>
    
    <summary type="html">
    
      感谢三月的陪伴
    
    </summary>
    
      <category term="心情" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情，杂记" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85%EF%BC%8C%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mq面试</title>
    <link href="http://yoursite.com/2020/03/31/%E9%9D%A2%E8%AF%95/mq%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E3%80%82%E3%80%82%EF%BC%89.html"/>
    <id>http://yoursite.com/2020/03/31/面试/mq中间件面试题（持续更新。。）.html</id>
    <published>2020-03-31T15:30:03.000Z</published>
    <updated>2020-03-31T15:37:36.950Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><h1 id="mq中间件面试题（持续更新。。）"><a href="#mq中间件面试题（持续更新。。）" class="headerlink" title="mq中间件面试题（持续更新。。）"></a>mq中间件面试题（持续更新。。）</h1><blockquote><p>曾经走不出的日子，现在只剩下回忆了</p></blockquote><ol><li>各种mq的区别，以及mq的优点<a id="more"></a>解耦 削峰 异步</li></ol><p>中间件有点:将消息引入消息队列，非必要的逻辑使用mq，加快相应速度</p><p>缺点：系统的可用性降低，系统的依赖越多，越容易挂掉</p><p>硬生生加个mq进来，你怎么保证消息不被重复消费，怎么处理消息丢失的情况？等等问题</p><div class="table-container"><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>kafka</th></tr></thead><tbody><tr><td>开发语言</td><td>java</td><td>erlang</td><td>java</td><td>scala</td></tr><tr><td>吞吐量（1）</td><td>万级</td><td>万级</td><td>10万级</td><td>10万级</td></tr><tr><td>时效性</td><td>ms</td><td>us级</td><td>ms级</td><td>ms级以内</td></tr><tr><td>可靠性</td><td>较低</td><td>基本不丢</td><td>可0</td><td>可0</td></tr><tr><td>可用性</td><td>高</td><td>高</td><td>非常高</td><td>非常高</td></tr></tbody></table></div><ol><li>如何保证消息不被重复消费？</li></ol><p>什么会造成重复消费?<br>其实无论是那种消息队列，造成重复消费原因其实都是类似的。正常情况下，消费者在消费消息时候，消费完毕后，会发送一个确认信息给消息队列，消息队列就知道该消息被消费了，就会将该消息从消息队列中删除。只是不同的消息队列发送的确认信息形式不同,例如RabbitMQ是发送一个ACK确认消息，RocketMQ是返回一个CONSUME_SUCCESS成功标志，kafka实际上有个offset的概念，简单说一下(如果还不懂，出门找一个kafka入门到精通教程),就是每一个消息都有一个offset，kafka消费过消息后，需要提交offset，让消息队列知道自己已经消费过了。那造成重复消费的原因?，就是因为网络传输等等故障，确认信息没有传送到消息队列，导致消息队列不知道自己已经消费过该消息了，再次将该消息分发给其他的消费者。<br>  如何解决?这个问题针对业务场景来答分以下几点<br>  (1)比如，你拿到这个消息做数据库的insert操作。那就容易了，给这个消息做一个唯一主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。（还是选你吧）<br>  (2)再比如，你拿到这个消息做redis的set的操作，那就容易了，不用解决，因为你无论set几次结果都是一样的，set操作本来就算幂等操作。<br>  (3)如果上面两种情况还不行，上大招。准备一个第三方介质,来做消费记录。以redis为例，给消息分配一个全局id，只要消费过该消息，将<id,message>以K-V形式写入redis。那消费者开始消费前，先去redis中查询有没消费记录即可。</id,message></p><p>3.如何保证消息的可靠传输？</p><p>三个情况，生产者丢数据，消费者丢，通道丢</p><p>rabbitMq的生产者有事务和confirm（常用），事务慢，confirm是ack机制</p><p>队列丢一般是开启持久化 durable设为true </p><p>3)消费者丢数据<br>消费者丢数据一般是因为采用了自动确认消息模式。这种模式下，消费者会自动确认收到信息。这时rahbitMQ会立即将消息删除，这种情况下如果消费者出现异常而没能处理该消息，就会丢失该消息。<br>至于解决方案，采用手动确认消息即可。<br>kafka<br>Producer在发布消息到某个Partition时，先通过ZooKeeper找到该Partition的Leader，然后无论该Topic的Replication Factor为多少（也即该Partition有多少个Replica），Producer只将该消息发送到该Partition的Leader。Leader会将该消息写入其本地Log。每个Follower都从Leader中pull数据。<br>针对上述情况，得出如下分析<br>(1)生产者丢数据<br>在kafka生产中，基本都有一个leader和多个follwer。follwer会去同步leader的信息。因此，为了避免生产者丢数据，做如下两点配置</p><p>第一个配置要在producer端设置acks=all。这个配置保证了，follwer同步完成后，才认为消息发送成功。<br>在producer端设置retries=MAX，一旦写入失败，这无限重试<br>(2)消息队列丢数据<br>针对消息队列丢数据的情况，无外乎就是，数据还没同步，leader就挂了，这时zookpeer会将其他的follwer切换为leader,那数据就丢失了。针对这种情况，应该做两个配置。</p><p>replication.factor参数，这个值必须大于1，即要求每个partition必须有至少2个副本<br>min.insync.replicas参数，这个值必须大于1，这个是要求一个leader至少感知到有至少一个follower还跟自己保持联系<br>这两个配置加上上面生产者的配置联合起来用，基本可确保kafka不丢数据</p><p>(3)消费者丢数据<br>这种情况一般是自动提交了offset，然后你处理程序过程中挂了。kafka以为你处理好了。再强调一次offset是干嘛的<br>offset：指的是kafka的topic中的每个消费组消费的下标。简单的来说就是一条消息对应一个offset下标，每次消费数据的时候如果提交offset，那么下次消费就会从提交的offset加一那里开始消费。<br>比如一个topic中有100条数据，我消费了50条并且提交了，那么此时的kafka服务端记录提交的offset就是49(offset从0开始)，那么下次消费的时候offset就从50开始消费。<br>解决方案也很简单，改成手动提交即可。</p><h1 id=""><a href="#" class="headerlink" title="#"></a>#</h1><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1><h1 id="-2"><a href="#-2" class="headerlink" title="#"></a>#</h1><hr>]]></content>
    
    <summary type="html">
    
      mq中间件面试题（持续更新）
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="mq，面试" scheme="http://yoursite.com/tags/mq%EF%BC%8C%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>reids面试题</title>
    <link href="http://yoursite.com/2020/03/31/%E9%9D%A2%E8%AF%95/%E8%BF%99%E6%98%AF%E7%AF%87%E9%95%BF%E6%96%87.html"/>
    <id>http://yoursite.com/2020/03/31/面试/这是篇长文.html</id>
    <published>2020-03-31T15:30:03.000Z</published>
    <updated>2020-03-31T15:39:40.653Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><h1 id="这是篇长文"><a href="#这是篇长文" class="headerlink" title="这是篇长文"></a>这是篇长文</h1><blockquote><p>有一种落差是，你配不上自己的野心，也辜负了所有的苦难</p></blockquote><h2 id="1-redis支持哪几种数据类型"><a href="#1-redis支持哪几种数据类型" class="headerlink" title="1. redis支持哪几种数据类型"></a>1. redis支持哪几种数据类型</h2><p>1）String 最基本的数据类型</p><p>2）list：按照添加顺序的字符串列表</p><p>3）set：无序的字符串集合</p><p>4）sorted set 有序的字符串集合、</p><p>5）hash 类似与map key-value</p><h2 id="2-reids持久化机制AOF与RDB"><a href="#2-reids持久化机制AOF与RDB" class="headerlink" title="2.reids持久化机制AOF与RDB"></a>2.reids持久化机制AOF与RDB</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">打开AOF持久化机制之后，redis每次接收到一条写命令，就会写入日志文件中，当然是先写入os cache的，然后每隔一定时间再fsync一下</span><br><span class="line"></span><br><span class="line">而且即使AOF和RDB都开启了，redis重启的时候，<span class="string">`也是优先通过AOF进行数据恢复的，因为aof数据比较完整`</span></span><br><span class="line"></span><br><span class="line">可以配置AOF的fsync策略，有三种策略可以选择，一种是每次写入一条数据就执行一次fsync; 一种是每隔一秒执行一次fsync; 一种是不主动执行fsync</span><br><span class="line"></span><br><span class="line">always -&gt; 每次写入一条数据，立即将这个数据对应的写日志fsync到磁盘上去，性能非常非常差，吞吐量很低; </span><br><span class="line">mysql -&gt; 内存策略，大量磁盘，QPS到多少，一两k。QPS，每秒钟的请求数量</span><br><span class="line">redis -&gt; 内存，磁盘持久化，QPS到多少，单机，一般来说，上万QPS没问题</span><br><span class="line"><span class="string">`everysec`</span>: 每秒将os cache中的数据fsync到磁盘，这个最常用的，生产环境一般都这么配置，性能很高，QPS还是可以上万的</span><br><span class="line">no: 仅仅redis负责将数据写入os cache就撒手不管了，然后后面os自己会时不时有自己的策略将数据刷入磁盘，不可控了</span><br><span class="line">aof rewrite配置策略</span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line">说明：如果上一次aof是<span class="number">128</span>mb ，这次的如果超过了上次的<span class="number">100</span>%且大于<span class="number">64</span>mb就会执行rewrite</span><br><span class="line">（<span class="number">1</span>）redis fork一个子进程</span><br><span class="line">（<span class="number">2</span>）子进程基于当前内存中的数据，构建日志，开始往一个新的临时的AOF文件中写入日志</span><br><span class="line">（<span class="number">3</span>）redis主进程，接收到client新的写操作之后，在内存中写入日志，同时新的日志也继续写入旧的AOF文件</span><br><span class="line">（<span class="number">4</span>）子进程写完新的日志文件之后，redis主进程将内存中的新日志再次追加到新的AOF文件中</span><br><span class="line">（<span class="number">5</span>）用新的日志文件替换掉旧的日志文件</span><br><span class="line"><span class="number">1.</span>rdb优点：</span><br><span class="line">（<span class="number">1</span>）RDB会生成多个数据文件，每个数据文件都代表了某一个时刻中redis的数据，这种多个数据文件的方式，非常适合做冷备，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说Amazon的S3云服务上去，在国内可以是阿里云的ODPS分布式存储上，以预定好的备份策略来定期备份redis中的数据</span><br><span class="line">（<span class="number">2</span>）RDB对redis对外提供的读写服务，影响非常小，可以让redis保持高性能，因为redis主进程只需要fork一个子进程，让子进程执行磁盘IO操作来进行RDB持久化即可</span><br><span class="line">（<span class="number">3</span>）相对于AOF持久化机制来说，直接基于RDB数据文件来重启和恢复redis进程，更加快速</span><br><span class="line"><span class="number">2.</span>rdb缺点</span><br><span class="line">（<span class="number">1</span>）如果想要在redis故障时，尽可能少的丢失数据，那么RDB没有AOF好。一般来说，RDB数据快照文件，都是每隔<span class="number">5</span>分钟，或者更长时间生成一次，这个时候就得接受一旦redis进程宕机，那么会丢失最近<span class="number">5</span>分钟的数据</span><br><span class="line">（<span class="number">2</span>）RDB每次在fork子进程来执行RDB快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒</span><br><span class="line"><span class="number">3.</span>aof优点</span><br><span class="line">（<span class="number">1</span>）AOF可以更好的保护数据不丢失，一般AOF会每隔<span class="number">1</span>秒，通过一个后台线程执行一次fsync操作，最多丢失<span class="number">1</span>秒钟的数据</span><br><span class="line">（<span class="number">2</span>）AOF日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复</span><br><span class="line">（<span class="number">3</span>）AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。</span><br><span class="line">（<span class="number">4</span>）AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</span><br><span class="line"><span class="number">4.</span>aof缺点</span><br><span class="line">（<span class="number">1</span>）对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</span><br><span class="line">（<span class="number">2</span>）AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高</span><br><span class="line">（<span class="number">3</span>）以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似AOF这种较为复杂的基于命令日志/merge/回放的方式，比基于RDB每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有bug。不过AOF就是为了避免rewrite过程导致的bug，因此每次rewrite并不是基于旧的指令日志进行merge的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。</span><br><span class="line"><span class="number">5.</span>选择</span><br><span class="line">（<span class="number">1</span>）两种都要有</span><br><span class="line">（<span class="number">2</span>）第一，通过AOF做冷备，没有RDB做冷备，来的恢复速度更快; 第二，RDB每次简单粗暴生成数据快照，更加健壮，可以避免AOF这种复杂的备份和恢复机制的bug</span><br><span class="line">（<span class="number">3</span>）用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，还可以使用RDB来进行快速的数据恢复</span><br></pre></td></tr></table></figure><h2 id="3-缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题"><a href="#3-缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题" class="headerlink" title="3.缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题"></a>3.缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级等问题</h2><p><strong>缓存雪崩</strong></p><p>缓存在同一时间内大量键过期（失效），接着来的一大波请求瞬间都落在了数据库中导致连接异常。</p><p>解决方案：</p><p>方案1、也是像解决缓存穿透一样加锁排队;</p><p>方案2、建立备份缓存，缓存A和缓存B，A设置超时时间，B不设值超时时间，先从A读缓存，A没有读B，并且更新A缓存和B缓存;</p><p>方案3、设置缓存超时时间的时候加上一个随机的时间长度，比如这个缓存key的超时时间是固定的5分钟加上随机的2分钟，酱紫可从一定程度上避免雪崩问题</p><p>互斥锁排队：</p><p>即根据key获取value值为空时，锁上，从数据库中load数据后再释放锁。若其它线程获取锁失败，则等待一段时间后重试。这里要注意，分布式环境中要使用分布式锁，单机的话用普通的锁（synchronized、Lock）就够了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWithLock</span><span class="params">(String key, Jedis jedis, String lockKey, String uniqueId, <span class="keyword">long</span> expireTime)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过key获取value</span></span><br><span class="line">    String value = redisService.get(key);</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isEmpty(value)) &#123;</span><br><span class="line">        <span class="comment">//封装的tryDistributedLock包括setnx和expire两个功能，在低版本的redis中不支持</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> locked = redisService.tryDistributedLock(jedis, lockKey, uniqueId, expireTime);</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                value = userService.getById(key);</span><br><span class="line">                redisService.set(key, value);</span><br><span class="line">                redisService.del(lockKey);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 其它线程进来了没获取到锁便等待50ms后重试</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                getWithLock(key, jedis, lockKey, uniqueId, expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"getWithLock exception="</span> + e);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisService.releaseDistributedLock(jedis, lockKey, uniqueId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getByKey</span><span class="params">(String keyA,String keyB)</span> </span>&#123;</span><br><span class="line">    String value = redisService.get(keyA);</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isEmpty(value)) &#123;</span><br><span class="line">        value = redisService.get(keyB);</span><br><span class="line">        String newValue = getFromDbById();</span><br><span class="line">        redisService.set(keyA,newValue,<span class="number">31</span>, TimeUnit.DAYS);</span><br><span class="line">        redisService.set(keyB,newValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存穿透</strong></p><p>缓存击穿表示恶意用户模拟请求很多缓存中不存在的数据，由于缓存中都没有，导致这些请求短时间内直接落在了数据库上，导致数据库异常。这个我们在实际项目就遇到了，有些抢购活动、秒杀活动的接口API被大量的恶意用户刷，导致短时间内数据库c超时了，好在数据库是读写分离，同时也有进行接口限流，hold住了。</p><p><strong>方案1、使用互斥锁排队</strong></p><p><strong>方案2、接口限流与熔断、降级</strong></p><p><strong>方案3、布隆过滤器</strong></p><p>bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，下面先来简单的实现下看看效果，我这里用guava实现的布隆过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilterTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> key = <span class="number">999998</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), capacity);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*返回计算机最精确的时间，单位微妙*/</span></span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"成功过滤到"</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"布隆过滤器消耗时间:"</span> + (end - start));</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = capacity + <span class="number">20000</span>; i &lt; capacity + <span class="number">30000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">                sum = sum + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"错判率为:"</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分布式锁：分布式锁 使用zk，使用简单，可靠性高 ，redis的并发性好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.roncoo.eshop.cache.zk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher.Event.KeeperState;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ZooKeeperSession</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ZooKeeper zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 去连接zookeeper server，创建会话的时候，是异步去进行的</span></span><br><span class="line"><span class="comment">// 所以要给一个监听器，说告诉我们什么时候才是真正完成了跟zk server的连接</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.zookeeper = <span class="keyword">new</span> ZooKeeper(</span><br><span class="line"><span class="string">"192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181"</span>, </span><br><span class="line"><span class="number">50000</span>, </span><br><span class="line"><span class="keyword">new</span> ZooKeeperWatcher());</span><br><span class="line"><span class="comment">// 给一个状态CONNECTING，连接中</span></span><br><span class="line">System.out.println(zookeeper.getState());</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="comment">// java多线程并发同步的一个工具类</span></span><br><span class="line"><span class="comment">// 会传递进去一些数字，比如说1,2 ，3 都可以</span></span><br><span class="line"><span class="comment">// 然后await()，如果数字不是0，那么久卡住，等待</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他的线程可以调用coutnDown()，减1</span></span><br><span class="line"><span class="comment">// 如果数字减到0，那么之前所有在await的线程，都会逃出阻塞的状态</span></span><br><span class="line"><span class="comment">// 继续向下运行</span></span><br><span class="line"></span><br><span class="line">connectedSemaphore.await();</span><br><span class="line">&#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"ZooKeeper session established......"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquireDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">zookeeper.create(path, <span class="string">""</span>.getBytes(), </span><br><span class="line">Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);<span class="comment">//临时节点</span></span><br><span class="line">System.out.println(<span class="string">"success to acquire lock for product[id="</span> + productId + <span class="string">"]"</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 如果那个商品对应的锁的node，已经存在了，就是已经被别人加锁了，那么就这里就会报错</span></span><br><span class="line">            <span class="comment">//并尝试持续获取锁，指到拿到</span></span><br><span class="line"><span class="comment">// NodeExistsException</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>); </span><br><span class="line">zookeeper.create(path, <span class="string">""</span>.getBytes(), </span><br><span class="line">Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">count++;</span><br><span class="line">System.out.println(<span class="string">"the "</span> + count + <span class="string">" times try to acquire lock for product[id="</span> + productId + <span class="string">"]......"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"success to acquire lock for product[id="</span> + productId + <span class="string">"] after "</span> + count + <span class="string">" times try......"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放掉一个分布式锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">zookeeper.delete(path, -<span class="number">1</span>); </span><br><span class="line">System.out.println(<span class="string">"release the lock for product[id="</span> + productId + <span class="string">"]......"</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建立zk session的watcher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Receive watched event: "</span> + event.getState());</span><br><span class="line"><span class="keyword">if</span>(KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">connectedSemaphore.countDown();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装单例的静态内部类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperSession instance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">instance = <span class="keyword">new</span> ZooKeeperSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取单例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Singleton.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化单例的便捷方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存预热</strong></p><p>缓存，热，预热，热数据</p><p>解决方案：引入大数据实时计算storm</p><h2 id="4-redis-内存淘汰机制。"><a href="#4-redis-内存淘汰机制。" class="headerlink" title="4.redis 内存淘汰机制。"></a><strong>4.redis 内存淘汰机制。</strong></h2><p>redis 内存淘汰机制（MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？）</p><p><strong>volatile-lru</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p><strong>allkeys-lru</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）.</p><p><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</p><h2 id="5-如何解决-Redis-的并发竞争-Key-问题"><a href="#5-如何解决-Redis-的并发竞争-Key-问题" class="headerlink" title="5.如何解决 Redis 的并发竞争 Key 问题"></a>5.如何解决 Redis 的并发竞争 Key 问题</h2><p>所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺序不同，这样也就导致了结果的不同！</p><p>推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</p><p>基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。</p><p>锁上面已经提供啦</p><h2 id="6-如何保证缓存与数据库双写时的数据一致性？"><a href="#6-如何保证缓存与数据库双写时的数据一致性？" class="headerlink" title="6.如何保证缓存与数据库双写时的数据一致性？"></a>6.如何保证缓存与数据库双写时的数据一致性？</h2><p>你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如何解决一致性问题？</p><p>一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致的情况</p><p>串行化之后，就会导致系统的吞吐量会大度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。</p><p>还有一种方式就是可能会暂时产生不一致的情况，但是发生的几率特别小，就是<strong>先更新数据库，然后再删除缓存。</strong></p><p><strong>这种情况不存在并发问题么？</strong></p><p>不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生</p><p>（1）缓存刚好失效<br> （2）请求A查询数据库，得一个旧值<br> （3）请求B将新值写入数据库<br> （4）请求B删除缓存<br> （5）请求A将查到的旧值写入缓存</p><p> 几率很小啊，数据库读明显的比写快</p><p><strong>如何解决上述并发问题？</strong></p><p>首先，给缓存设有效时间是一种方案。其次，采用异步延时删除策略，保证读请求完成以后，再进行删除操作。</p><p>可以用mq，有数据写的情况下进队列发消息加锁更新cache和redis</p><h2 id="7-redis为什么是单线程的"><a href="#7-redis为什么是单线程的" class="headerlink" title="7.redis为什么是单线程的"></a><strong>7.redis为什么是单线程的</strong></h2><ol><li>大部分请求是纯粹的内存操作（非常快速）</li><li>采用单线程，避免了不必要的上下文切换和竞争条件</li><li>非阻塞 IO，内部采用 epoll，epoll 中的读、写、关闭、连接都转化成了事件，然后利用 epoll 的多路复用特性，避免 IO 代价。</li></ol><h2 id="8-聊一聊redis的数据分布算法"><a href="#8-聊一聊redis的数据分布算法" class="headerlink" title="8.聊一聊redis的数据分布算法"></a>8.聊一聊redis的数据分布算法</h2><p>有hash，一致性hash hash solt</p><ul><li><p>ash 算法<br> 按照key的hash值对节点进行取模，然后得到的结果就是存放数据的节点；<br> 缺点：如果一个节点挂了，新的数据按照新的节点数据取模导致无法取到数据（所有数据都取不到），于是就会被击穿到数据库，导致数据库压力增大。同时需要重新进行大量计算，把原有数据进行重新分配。</p></li><li><p>一致性hash算法（虚拟节点算法）<br> 把节点分布到一个圆环中分布，key的hash值于当前节点hash值比较，然后确定在圆环上的位置，同时按照顺时针方向去寻找最近的一个节点。<br> 按照上述理论，当一个节点失效的时候，就只有这个节点对应的数据无法取到，而其他节点数据依然还是可以取到。所以，可用性比hash算法要高。<br> 缺点：针对热点数据问题，可能都会涌入到同一个节点中，而其他节点数据又少。<br> 优化：在圆环中增加多个虚拟的同类节点，比如原来有1号 2 号 3号 这三个节点，现在虚拟出多个1号、2好、3号的节点分布在圆环上，这样就可以更细粒度的切割圆环数据，尽量减少了热点数据集中问题。</p></li><li><p>hash slot 算法<br> 上述都是物理节点的分布做算法，而redis cluster是通过在节点中分布虚拟的小节点来分布数据。redis cluster会在整个集群节点中分布 16384 个虚拟slot。每个节点分配一部分slot。然后所有的key的hash对 16384 取模，从而知道在哪个slot，也就知道了数据在哪个节点上。 当一个节点挂了时，就会把这个节点上的slot迁移到其他节点上。<br> 因此，可以认为hash slot 算法，是一致性hash算法的优化。<br> 优点：即拥有了一致性hash算法的优点，又避免了热点数据；<br> master的增加和移除也是非常方面，增加master，就把其他节点的slot移动到这个master。移除master，就把当前master的slot移动到其他节点。</p></li></ul><p>在罗列可能被问到的</p><h2 id="9-redis-和-memcached-的区别"><a href="#9-redis-和-memcached-的区别" class="headerlink" title="9.redis 和 memcached 的区别"></a>9.redis 和 memcached 的区别</h2><p>redis支持更丰富的数据类型（支持更复杂的应用场景）：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。<br>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。<br>集群模式：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.<br>Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。</p><p>这里科普下：redis的作者叫antirez ，开源领域的大牛，人家自己写自己公司用的，开源后牛逼了，几十个国家再用，然后利用业余时间维护，后来被vmware公司赞助还是从事redis的开发，最后公司都被VMware收购啦。</p><p>喜欢她的一句话，人家都40的老娘们了，还写着呢</p><blockquote><p>在技术上把时间花在讨论性别问题实在是浪费时间，还不如老老实实去编软件来的有价值</p></blockquote><p>用很流行的一句话就说<code>Talk is cheap.Show me the code</code></p><h2 id="10-redis集群原理"><a href="#10-redis集群原理" class="headerlink" title="10. redis集群原理"></a>10. redis集群原理</h2><p>Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。</p><p>Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</p><p>这里不会将太细：</p><p>sentinal 中文叫森町弄就是哨兵</p><p>主要功能</p><p>（1）集群监控，负责监控redis master和slave进程是否正常工作<br>（2）消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员<br>（3）故障转移，如果master node挂掉了，会自动转移到slave node上<br>（4）配置中心，如果故障转移发生了，通知client客户端新的master地址</p><p>哨兵之间互相监控协同合作</p><p>这里说到故障转移的选举策略：</p><p>（1）哨兵至少需要3个实例，来保证自己的健壮性 因为1+1&gt;1 这种<br>（2）哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性<br>（3）对于哨兵 + redis主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练</p><p>m1 S1</p><p>M2 S2</p><p>M3 S3</p><p>Configuration: quorum = 2，majority</p><p>如果M1所在机器宕机了，那么三个哨兵还剩下2个，S2和S3可以一致认为master宕机，然后选举出一个来执行故障转移</p><p>同时3个哨兵的majority是2，所以还剩下的2个哨兵运行着，就可以允许执行故障转移</p><p>sdown odown客观宕机，与主观宕机</p><p>sdown是主观宕机，就一个哨兵如果自己觉得一个master宕机了，那么就是主观宕机</p><p>就是ping master（同时sentinal之间也来回交谈）</p><p>超过了is-master-down-after-milliseconds指定的毫秒数之后，就主观认为master宕机</p><p>odown是客观宕机，如果quorum数量的哨兵都觉得一个master宕机了，那么就是客观宕机</p><p>如果一个哨兵在指定时间内，收到了quorum指定数量的其他哨兵也认为那个master是sdown了，那么就认为是odown了，客观认为master宕机</p><p>slave=&gt;master</p><p>（1）跟master断开连接的时长，越长越没机会 (down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state<br>（2）slave优先级 越低，优先级越高<br>（3）复制offset 越多约有机会<br>（4）run id 每个都有很长的字符串</p><p>排序：</p><p>（1）按照slave优先级进行排序，slave priority越低，优先级就越高<br>（2）如果slave priority相同，那么看replica offset，哪个slave复制了越多的数据，offset越靠后，优先级就越高<br>（3）如果上面两个条件都相同，那么选择一个run id比较小的那个slave</p><p>quorum和majority</p><p>每次一个哨兵要做主备切换，首先需要quorum数量的哨兵认为odown，然后选举出一个哨兵来做切换，这个哨兵还得得到majority哨兵的授权，才能正式执行切换</p><p>如果quorum &lt; majority，比如5个哨兵，majority就是3，quorum设置为2，那么就3个哨兵授权就可以执行切换</p><p>但是如果quorum &gt;= majority，那么必须quorum数量的哨兵都授权，比如5个哨兵，quorum是5，那么必须5个哨兵都同意授权，才能执行切换</p><p>quorum理解成有权利家庭成员，比如bb和mm，majority是大多数人</p><p>redis cluster 这个可扩容性强，可实现高吞吐</p><p>用ruby部署这里说下自己部署的时候会有很多坑，ruby版本问题包问题，尽量用下面的，新版redis还好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ruby</span><br><span class="line">yum install -y rubygems</span><br><span class="line">gem install redis</span><br><span class="line">将单机redis/src/redis-trib.rb 复制到。usr/bin</span><br><span class="line">redis-trib.rb create --repilcas 1 ...... --repilcas 是master的副本数自动指定的 solt自动hash分配</span><br><span class="line">添加node redis-trib.rb add-node --slave --master-id</span><br><span class="line">不加后面参数就是master</span><br><span class="line">删除redis-trib.rb del-node  </span><br><span class="line">删的是maser的话slave会自动挂接其他master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      redis面试题悉心整理（持续更新）
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="mq，面试" scheme="http://yoursite.com/tags/mq%EF%BC%8C%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>一个推荐</title>
    <link href="http://yoursite.com/2020/03/29/%E4%B8%80%E4%B8%AA%E6%8E%A8%E8%8D%90.html"/>
    <id>http://yoursite.com/2020/03/29/一个推荐.html</id>
    <published>2020-03-29T09:41:43.000Z</published>
    <updated>2020-03-29T16:35:30.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个推荐"><a href="#一个推荐" class="headerlink" title="一个推荐"></a>一个推荐</h1><h2 id="没了这个我好像不会上网了"><a href="#没了这个我好像不会上网了" class="headerlink" title="没了这个我好像不会上网了"></a>没了这个我好像不会上网了</h2><blockquote><p>谁说过一件难过的事情最多持续几天，因为后面会有更难的事</p></blockquote><p>最近因为pandownload的维护很多资料都不太好找，无意间发现了一个很牛逼的插件</p><p><code>Tampermonkey</code> 俗称‘油猴’，是一款浏览器插件管理器。可以安装一些网友开发的强大的浏览器插件。</p><p>举例：全网音乐下载播放，全网视频，百度去光告，自定义页面，百度云增加全网盘搜索功能，不过他的搜索引擎貌似没有度盘搜好用。</p><ol><li>插件安装<a href="https://pan.baidu.com/s/1znXdqdQ5-LepdB9gE6CPgw" target="_blank" rel="noopener">百度云提取码：ejzd</a></li></ol><p>谷歌浏览器 设置 =&gt;扩展程序 文件拖进去即可</p><ol><li>插件安装</li></ol><p><a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">点我查找</a>，在这个网站寻找需要的就好啦，安装即生效很方便</p><ol><li><p>推荐 </p><p>屏幕保护，百度云，vip音乐，vip视频解析，去广告</p></li><li><p>我安装的图</p></li></ol><p><img src="/2020/03/29/一个推荐/wallhaven-248751.png" alt="image-20200329173353526"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个推荐&quot;&gt;&lt;a href=&quot;#一个推荐&quot; class=&quot;headerlink&quot; title=&quot;一个推荐&quot;&gt;&lt;/a&gt;一个推荐&lt;/h1&gt;&lt;h2 id=&quot;没了这个我好像不会上网了&quot;&gt;&lt;a href=&quot;#没了这个我好像不会上网了&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>那些实战的演练</title>
    <link href="http://yoursite.com/2020/03/29/%E9%82%A3%E4%BA%9B%E5%AE%9E%E6%88%98%E7%9A%84%E6%BC%94%E7%BB%83.html"/>
    <id>http://yoursite.com/2020/03/29/那些实战的演练.html</id>
    <published>2020-03-29T09:39:44.000Z</published>
    <updated>2020-03-29T09:41:26.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-那些实战的演练"><a href="#nginx-那些实战的演练" class="headerlink" title="nginx 那些实战的演练"></a>nginx 那些实战的演练</h1><blockquote><p>转身的寥寥笑脸，不甘的甘愿</p></blockquote><h2 id="1-架构设置"><a href="#1-架构设置" class="headerlink" title="1.架构设置"></a>1.架构设置</h2><p>流量分发：在分发层的nginx实施</p><p>多级缓存架构的控制逻辑：在应用层的nginx实施</p><p>热点数据的自动降级，也写在分发层</p><ol><li>第一个nginx作为应用层</li></ol><p>（1）部署openresty</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/servers  </span><br><span class="line">cd /usr/servers/</span><br><span class="line"></span><br><span class="line">yum install -y readline-devel pcre-devel openssl-devel gcc</span><br><span class="line"></span><br><span class="line">wget http://openresty.org/download/ngx_openresty<span class="number">-1.7</span><span class="number">.7</span><span class="number">.2</span>.tar.gz  </span><br><span class="line">tar -xzvf ngx_openresty<span class="number">-1.7</span><span class="number">.7</span><span class="number">.2</span>.tar.gz  </span><br><span class="line">cd /usr/servers/ngx_openresty<span class="number">-1.7</span><span class="number">.7</span><span class="number">.2</span>/</span><br><span class="line"></span><br><span class="line">cd bundle/LuaJIT<span class="number">-2.1</span><span class="number">-20150120</span>/  </span><br><span class="line">make clean &amp;&amp; make &amp;&amp; make install  </span><br><span class="line">ln -sf luajit<span class="number">-2.1</span><span class="number">.0</span>-alpha /usr/<span class="keyword">local</span>/bin/luajit</span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/FRiCKLE/ngx_cache_purge/archive/<span class="number">2.3</span>.tar.gz  </span><br><span class="line">tar -xvf <span class="number">2.3</span>.tar.gz  </span><br><span class="line"></span><br><span class="line">cd bundle  </span><br><span class="line">wget https://github.com/yaoweibin/nginx_upstream_check_module/archive/v0<span class="number">.3</span><span class="number">.0</span>.tar.gz  </span><br><span class="line">tar -xvf v0<span class="number">.3</span><span class="number">.0</span>.tar.gz  </span><br><span class="line"></span><br><span class="line">cd /usr/servers/ngx_openresty<span class="number">-1.7</span><span class="number">.7</span><span class="number">.2</span>  </span><br><span class="line">./configure <span class="comment">--prefix=/usr/servers --with-http_realip_module  --with-pcre  --with-luajit --add-module=./bundle/ngx_cache_purge-2.3/ --add-module=./bundle/nginx_upstream_check_module-0.3.0/ -j2  </span></span><br><span class="line">make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">cd /usr/servers/  </span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">/usr/servers/luajit</span><br><span class="line">/usr/servers/lualib</span><br><span class="line">/usr/servers/nginx</span><br><span class="line">/usr/servers/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p>常用的设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/servers/nginx/sbin/nginx -t  #检测</span><br><span class="line">/usr/servers/nginx/sbin/nginx     #启动</span><br><span class="line">/usr/servers/nginx/sbin/nginx -s reload  #重启</span><br><span class="line">tail -f /usr/servers/nginx/logs/error.log #查看异常日志</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">项目工程结构</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">    hello.conf     </span><br><span class="line">    lua              </span><br><span class="line">      hello.lua</span><br><span class="line">    lualib            </span><br><span class="line">      *.lua</span><br><span class="line">      *.so</span><br><span class="line"></span><br><span class="line">放在/usr/hello目录下</span><br><span class="line"></span><br><span class="line">/usr/servers/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">worker_processes  <span class="number">2</span>;  </span><br><span class="line"></span><br><span class="line">error_log  logs/<span class="built_in">error</span>.<span class="built_in">log</span>;  </span><br><span class="line"></span><br><span class="line">events &#123;  </span><br><span class="line">    worker_connections  <span class="number">1024</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">http &#123;  </span><br><span class="line">    include       mime.types;  </span><br><span class="line">    default_type  text/html;  </span><br><span class="line">  </span><br><span class="line">    lua_package_path <span class="string">"/usr/hello/lualib/?.lua;;"</span>;  </span><br><span class="line">    lua_package_cpath <span class="string">"/usr/hello/lualib/?.so;;"</span>; </span><br><span class="line">    include /usr/hello/hello.conf;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">/usr/hello/hello.conf</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">    listen       <span class="number">80</span>;  </span><br><span class="line">    server_name  _;  </span><br><span class="line">  </span><br><span class="line">    location /lua &#123;  </span><br><span class="line">        default_type <span class="string">'text/html'</span>;  </span><br><span class="line">        lua_code_cache off;  </span><br><span class="line">        content_by_lua_file /usr/example/lua/test.lua;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-基于id的流量分发"><a href="#2-基于id的流量分发" class="headerlink" title="2.基于id的流量分发"></a>2.基于id的流量分发</h2><p>1、获取请求参数，比如productId<br>2、对productId进行hash<br>3、hash值对应用服务器数量取模，获取到一个应用服务器<br>4、利用http发送请求到应用层nginx<br>5、获取响应后返回</p><p>首先引入lua http lib包</p><p>wget <a href="https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua" target="_blank" rel="noopener">https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua</a><br>wget <a href="https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua" target="_blank" rel="noopener">https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua</a> </p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">local uri_args = ngx.req.get_uri_args()</span><br><span class="line">local productId = uri_args[&quot;productId&quot;]</span><br><span class="line"></span><br><span class="line">local host = &#123;&quot;192.168.31.19&quot;, &quot;192.168.31.187&quot;&#125;</span><br><span class="line">local hash = ngx.crc32_long(productId)</span><br><span class="line">hash = (hash % 2) + 1  </span><br><span class="line">backend = &quot;http://&quot;..host[hash]</span><br><span class="line"></span><br><span class="line">local method = uri_args[&quot;method&quot;]</span><br><span class="line">local requestBody = &quot;/&quot;..method..&quot;?productId=&quot;..productId</span><br><span class="line"></span><br><span class="line">local http = require(&quot;resty.http&quot;)  </span><br><span class="line">local httpc = http.new()  </span><br><span class="line"></span><br><span class="line">local resp, err = httpc:request_uri(backend, &#123;  </span><br><span class="line">    method = &quot;GET&quot;,  </span><br><span class="line">    path = requestBody</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">if not resp then  </span><br><span class="line">    ngx.say(&quot;request error :&quot;, err)  </span><br><span class="line">    return  </span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)  </span><br><span class="line">  </span><br><span class="line">httpc:close()</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> url_args = ngx.req.get_uri_args</span><br><span class="line"><span class="keyword">local</span> productId = url_args[<span class="string">"productId"</span>]</span><br><span class="line"><span class="keyword">local</span> host =[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">local</span> hash = ngx.crc32_long(productId)</span><br><span class="line"><span class="keyword">local</span> index = hash%<span class="number">2</span> +<span class="number">1</span></span><br><span class="line">backend = <span class="string">"http://"</span>..host[index]</span><br><span class="line"><span class="keyword">local</span> menthod = url_args[<span class="string">"method"</span>]</span><br><span class="line"><span class="keyword">local</span> requesBody = <span class="string">"/"</span>..menthod..<span class="string">"?productId="</span>..productId</span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new</span><br><span class="line">lcoal resq ,err =httpc:request_url(backed,&#123;</span><br><span class="line">        menthod=<span class="string">"GET"</span>,</span><br><span class="line">        <span class="built_in">path</span>=requestBody</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resq <span class="keyword">then</span></span><br><span class="line">    ngx.say(<span class="string">"req error :"</span>,err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">ngx.say(resq.body)</span><br><span class="line">httpc:<span class="built_in">close</span>()</span><br><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>nginx缓存</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">分发层nginx，lua应用，会将商品id，商品店铺id，都转发到后端的应用nginx</span><br><span class="line"></span><br><span class="line">/usr/servers/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、应用nginx的lua脚本接收到请求</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、获取请求参数中的商品id，以及商品店铺id</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、根据商品id和商品店铺id，在nginx本地缓存中尝试获取数据</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、如果在nginx本地缓存中没有获取到数据，那么就到redis分布式缓存中获取数据，如果获取到了数据，还要设置到nginx本地缓存中</span><br><span class="line"></span><br><span class="line">但是这里有个问题，建议不要用nginx+lua直接去获取redis数据</span><br><span class="line"></span><br><span class="line">因为openresty没有太好的redis cluster的支持包，所以建议是发送http请求到缓存数据生产服务，由该服务提供一个http接口</span><br><span class="line"></span><br><span class="line">缓存数生产服务可以基于redis cluster api从redis中直接获取数据，并返回给nginx</span><br><span class="line"></span><br><span class="line">cd /usr/hello/lualib/resty/  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http_headers.lua  </span><br><span class="line">wget https://raw.githubusercontent.com/pintsized/lua-resty-http/master/lib/resty/http.lua </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、如果缓存数据生产服务没有在redis分布式缓存中没有获取到数据，那么就在自己本地ehcache中获取数据，返回数据给nginx，也要设置到nginx本地缓存中</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、如果ehcache本地缓存都没有数据，那么就需要去原始的服务中拉去数据，该服务会从mysql中查询，拉去到数据之后，返回给nginx，并重新设置到ehcache和redis中</span><br><span class="line"></span><br><span class="line">这里先不考虑，后面要专门讲解一套分布式缓存重建并发冲突的问题和解决方案</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、nginx最终利用获取到的数据，动态渲染网页模板</span><br><span class="line"></span><br><span class="line">cd /usr/hello/lualib/resty/</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template.lua</span><br><span class="line">mkdir /usr/hello/lualib/resty/html</span><br><span class="line">cd /usr/hello/lualib/resty/html</span><br><span class="line">wget https://raw.githubusercontent.com/bungle/lua-resty-template/master/lib/resty/template/html.lua</span><br><span class="line"></span><br><span class="line">在hello.conf的server中配置模板位置</span><br><span class="line"></span><br><span class="line">set $template_location <span class="string">"/templates"</span>;  </span><br><span class="line">set $template_root <span class="string">"/usr/hello/templates"</span>;</span><br><span class="line"></span><br><span class="line">mkdir /usr/hello/templates</span><br><span class="line"></span><br><span class="line">vi product.html</span><br><span class="line"></span><br><span class="line">product id: &#123;* productId *&#125;&lt;br/&gt;</span><br><span class="line">product name: &#123;* productName *&#125;&lt;br/&gt;</span><br><span class="line">product picture list: &#123;* productPictureList *&#125;&lt;br/&gt;</span><br><span class="line">product specification: &#123;* productSpecification *&#125;&lt;br/&gt;</span><br><span class="line">product service: &#123;* productService *&#125;&lt;br/&gt;</span><br><span class="line">product color: &#123;* productColor *&#125;&lt;br/&gt;</span><br><span class="line">product size: &#123;* productSize *&#125;&lt;br/&gt;</span><br><span class="line">shop id: &#123;* shopId *&#125;&lt;br/&gt;</span><br><span class="line">shop name: &#123;* shopName *&#125;&lt;br/&gt;</span><br><span class="line">shop level: &#123;* shopLevel *&#125;&lt;br/&gt;</span><br><span class="line">shop good cooment rate: &#123;* shopGoodCommentRate *&#125;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、将渲染后的网页模板作为http响应，返回给分发层nginx</span><br><span class="line"></span><br><span class="line">hello.conf中：</span><br><span class="line"></span><br><span class="line">lua_shared_dict my_cache <span class="number">128</span>m;</span><br><span class="line"></span><br><span class="line">lua脚本中：</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> productId = uri_args[<span class="string">"productId"</span>]</span><br><span class="line"><span class="keyword">local</span> shopId = uri_args[<span class="string">"shopId"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cache_ngx = ngx.shared.my_cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> productCacheKey = <span class="string">"product_info_"</span>..productId</span><br><span class="line"><span class="keyword">local</span> shopCacheKey = <span class="string">"shop_info_"</span>..shopId</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> productCache = cache_ngx:get(productCacheKey)</span><br><span class="line"><span class="keyword">local</span> shopCache = cache_ngx:get(shopCacheKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> productCache == <span class="string">""</span> <span class="keyword">or</span> productCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">"http://192.168.31.179:8080"</span>,&#123;</span><br><span class="line">  method = <span class="string">"GET"</span>,</span><br><span class="line">  <span class="built_in">path</span> = <span class="string">"/getProductInfo?productId="</span>..productId</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">productCache = resp.body</span><br><span class="line">cache_ngx:set(productCacheKey, productCache, <span class="number">10</span> * <span class="number">60</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> shopCache == <span class="string">""</span> <span class="keyword">or</span> shopCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">"resty.http"</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">"http://192.168.31.179:8080"</span>,&#123;</span><br><span class="line">  method = <span class="string">"GET"</span>,</span><br><span class="line">  <span class="built_in">path</span> = <span class="string">"/getShopInfo?shopId="</span>..shopId</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">shopCache = resp.body</span><br><span class="line">cache_ngx:set(shopCacheKey, shopCache, <span class="number">10</span> * <span class="number">60</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">"cjson"</span>)</span><br><span class="line"><span class="keyword">local</span> productCacheJSON = cjson.decode(productCache)</span><br><span class="line"><span class="keyword">local</span> shopCacheJSON = cjson.decode(shopCache)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">productId = productCacheJSON.id,</span><br><span class="line">productName = productCacheJSON.name,</span><br><span class="line">productPrice = productCacheJSON.price,</span><br><span class="line">productPictureList = productCacheJSON.pictureList,</span><br><span class="line">productSpecification = productCacheJSON.specification,</span><br><span class="line">productService = productCacheJSON.service,</span><br><span class="line">productColor = productCacheJSON.color,</span><br><span class="line">productSize = productCacheJSON.size,</span><br><span class="line">shopId = shopCacheJSON.id,</span><br><span class="line">shopName = shopCacheJSON.name,</span><br><span class="line">shopLevel = shopCacheJSON.level,</span><br><span class="line">shopGoodCommentRate = shopCacheJSON.goodCommentRate</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">"resty.template"</span>)</span><br><span class="line">template.render(<span class="string">"product.html"</span>, context)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx-那些实战的演练&quot;&gt;&lt;a href=&quot;#nginx-那些实战的演练&quot; class=&quot;headerlink&quot; title=&quot;nginx 那些实战的演练&quot;&gt;&lt;/a&gt;nginx 那些实战的演练&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;转身的寥寥笑脸，不甘的甘愿
      
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习笔记（2）</title>
    <link href="http://yoursite.com/2020/03/29/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html"/>
    <id>http://yoursite.com/2020/03/29/nginx学习笔记（二）.html</id>
    <published>2020-03-29T09:38:30.000Z</published>
    <updated>2020-03-29T09:40:22.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx学习笔记-二"><a href="#nginx学习笔记-二" class="headerlink" title="nginx学习笔记  (二)"></a><code>nginx</code>学习笔记  (二)</h1><blockquote><p>时钟在走，时光飞逝，我失去了船，得到了宝藏，也失去了你。</p></blockquote><h2 id="1-openResty安装"><a href="#1-openResty安装" class="headerlink" title="1. openResty安装"></a>1. <code>openResty</code>安装</h2><p>==TODO</p><h2 id="2-hello-world"><a href="#2-hello-world" class="headerlink" title="2. hello_world"></a>2. hello_world</h2><p>nginx 如何嵌入 lua 脚本。方法就是在nginx的配置文件nginx.conf 中使用 content_by_lua 或者 cotent_by_lua_file 指令：</p><ol><li>content_by_lua 一般在很简单的lua脚本时使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /lua &#123;</span><br><span class="line">        set $test <span class="string">"hello, world."</span>;</span><br><span class="line">        content_by_lua <span class="string">'</span></span><br><span class="line"><span class="string">                ngx.header.content_type = "text/plain";</span></span><br><span class="line"><span class="string">                ngx.say(ngx.var.test);</span></span><br><span class="line"><span class="string">        '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ngx.say 就是打印出hello，world，本来就是c写的</p><ol><li>cotent_by_lua_file 适应于复杂的 lua 脚本，专门放入一个文件中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localition /lua&#123;</span><br><span class="line"> content_by_lua_file lua/hello.lua</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>lua访问redis</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lcoaltion /test_redis&#123;</span><br><span class="line">content_by_lua_file lua/test_redis.lua</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cat test_redis.lua</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">local redis = requre <span class="string">"resty.redis"</span></span><br><span class="line">local red = redis :<span class="keyword">new</span>()</span><br><span class="line">red.set_timeout(<span class="number">1000</span>)</span><br><span class="line">local ok,err =red:connect(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">    ngx.say(<span class="string">"fail to connect"</span>,err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">end</span><br><span class="line">ngx.say(<span class="string">"result"</span>,ok)</span><br><span class="line"> local res,err=red:get(<span class="string">"dog"</span>) </span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> res then</span><br><span class="line">      ngx.say(<span class="string">"failed to get doy: "</span>,err)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">   end</span><br><span class="line">  <span class="keyword">if</span> res == ngx.null then  </span><br><span class="line">     ngx.say(<span class="string">"dog not found"</span>)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">   end</span><br><span class="line">   ngx.say(<span class="string">"dog: "</span>, res)</span><br></pre></td></tr></table></figure><h2 id="3-访问mysql"><a href="#3-访问mysql" class="headerlink" title="3. 访问mysql"></a>3. 访问mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lua]# pwd</span><br><span class="line">/opt/openresty/nginx/lua</span><br><span class="line">[root@localhost lua]# cat mysql_test.lua</span><br><span class="line">local mysql = require &quot;resty.mysql&quot;</span><br><span class="line">local db, err = mysql:new()</span><br><span class="line"></span><br><span class="line">if not db then</span><br><span class="line">        ngx.say(&quot;failed to instantiate mysql: &quot;, err)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">db:set_timeout(1000)</span><br><span class="line"></span><br><span class="line">local ok, err, errno, sqlstate = db:connect&#123;</span><br><span class="line">        host = &quot;127.0.0.1&quot;,</span><br><span class="line">        port = 3306,</span><br><span class="line">        database = &quot;ngx_lua&quot;,</span><br><span class="line">        user = &quot;root&quot;,</span><br><span class="line">        password=&quot;digdeep&quot;,</span><br><span class="line">        max_packet_size = 1024 * 1024</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if not ok then</span><br><span class="line">        ngx.say(&quot;failed to connect: &quot;, err, &quot;: &quot;, errno, &quot; &quot;, sqlstate)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;connected to mysql.&quot;)</span><br><span class="line"></span><br><span class="line">local res, err, errno, sqlstate = db:query(&quot;drop table if exists cats&quot;)</span><br><span class="line">if not res then</span><br><span class="line">        ngx.say(&quot;bad result: &quot;, err, &quot;: &quot;, errno, &quot;: &quot;, sqlstate, &quot;.&quot;)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">res, err, errno, sqlstate = db:query(&quot;create table cats &quot; .. &quot;(id int not null primary key auto_increment, &quot;</span><br><span class="line">                                        .. &quot;name varchar(30))&quot;)</span><br><span class="line">if not res then</span><br><span class="line">        ngx.say(&quot;bad result: &quot;, err, &quot;: &quot;, errno, &quot;: &quot;, sqlstate, &quot;.&quot;)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(&quot;table cats created.&quot;)</span><br><span class="line"></span><br><span class="line">res, err, errno, sqlstate = db:query(&quot;insert into cats(name) &quot; .. &quot;values (\&apos;Bob\&apos;),(\&apos;\&apos;),(null)&quot;)</span><br><span class="line">if not res then</span><br><span class="line">        ngx.say(&quot;bad request: &quot;, err, &quot;: &quot;, errno, &quot;: &quot;, sqlstate, &quot;.&quot;)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">ngx.say(res.affected_rows, &quot; rows inserted into table cats &quot;, &quot;(last insert id: &quot;, res.insert_id, &quot;)&quot;)</span><br><span class="line"></span><br><span class="line">res, err, errno, sqlstate = db:query(&quot;select * from cats order by id asc&quot;, 10)</span><br><span class="line">if not res then</span><br><span class="line">        ngx.say(&quot;bad result &quot;, err, &quot;: &quot;, errno, &quot;: &quot;, sqlstate, &quot;.&quot;)</span><br><span class="line">        return</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local cjson = require &quot;cjson&quot;</span><br><span class="line">ngx.say(&quot;result: &quot;, cjson.encode(res))</span><br><span class="line"></span><br><span class="line">local ok, err = db:set_keepalive(1000, 100)</span><br><span class="line">if not ok then</span><br><span class="line">        ngx.say(&quot;failed to set keepalive: &quot;, err)</span><br><span class="line">        return</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="4-lua-的-capture-和-capture-multi-子查询"><a href="#4-lua-的-capture-和-capture-multi-子查询" class="headerlink" title="4.lua 的 capture 和 capture_multi(子查询)"></a>4.lua 的 capture 和 capture_multi(子查询)</h2><p><strong>capture_multi 是 openresty 一个十分强大的功能</strong>。它能极大的减少前端浏览器发送的http请求的数量，突破了浏览器对于同一个服务器并发请求数量的限制，因为他可以将前端的多个http请求减少为只要一个http请求到nginx，然后nginx使用capture_multi特性，对后端发起多个异步并发请求，然后统一将结果返回给前端。下面看一个例子：</p><p>首先在nginx.conf中加入下面的 location 配置，并且配置好 nginx 访问 php 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location /capture &#123;</span><br><span class="line">    content_by_lua_file lua/capture.lua;</span><br><span class="line">    #access_by_lua_file lua/capture.lua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           html;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>capture.lua 的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost html]# curl localhost/capture</span><br><span class="line">connected to mysql.</span><br><span class="line">table cats created.</span><br><span class="line">3 rows inserted into table cats (last insert id: 1)</span><br><span class="line">result: [&#123;&quot;name&quot;:&quot;Bob&quot;,&quot;id&quot;:1&#125;,&#123;&quot;name&quot;:&quot;&quot;,&quot;id&quot;:2&#125;,&#123;&quot;name&quot;:null,&quot;id&quot;:3&#125;]</span><br><span class="line"></span><br><span class="line">set result: 1</span><br><span class="line">dog: an animal</span><br><span class="line"></span><br><span class="line">hello ngx_lua!!!!</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line">200</span><br><span class="line">nil</span><br></pre></td></tr></table></figure><p>ngx.location.capture_multi{… …} 中的多个异步并发请求可以是 nginx.conf 中配置的 location(比如 /mysql_test, /redis_test, /lua)，也可以不是 location配置的路径，比如 index.php 就不是。index.php 就是一个简单的后台php 脚本。当然也可以是一个 java 实现的后台接口。</p><h2 id="5-openresty的缓存-lua-shared-dict"><a href="#5-openresty的缓存-lua-shared-dict" class="headerlink" title="5.openresty的缓存 lua_shared_dict"></a>5.openresty的缓存 lua_shared_dict</h2><p>定义一个缓存：</p><p>在nginx的配置文件 nginx.conf 的 http 端下面加入指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict ngx_cache 128m;</span><br></pre></td></tr></table></figure><p>就定义了一个 名称为 ngx_cache 大小为128m的内存用于缓存，<code>注意该缓存是所有nginx work process所共享的</code>。</p><p>在lua脚本中访问缓存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local ngx_cache = ngx.shared.ngx_cache</span><br><span class="line">local value = ngx_cache:get(key)</span><br><span class="line"></span><br><span class="line">local succ, err, forcible = ngx_cache:set(key, value, exptime)</span><br></pre></td></tr></table></figure><p>首先在 nginx.conf的server端中加入：</p><pre><code>    location /cache {        content_by_lua_file lua/cache.lua;    }</code></pre><p>编写cache.lua</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lua]<span class="meta"># cat cache.lua</span></span><br><span class="line">local redis = require <span class="string">"resty.redis"</span></span><br><span class="line">local red = redis:<span class="keyword">new</span>()</span><br><span class="line"></span><br><span class="line">function set_to_cache(key, value, exptime)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exptime then</span><br><span class="line">                exptime = <span class="number">0</span></span><br><span class="line">        end</span><br><span class="line">        local ngx_cache = ngx.shared.ngx_cache</span><br><span class="line">        local succ, err, forcible = ngx_cache:<span class="built_in">set</span>(key, value, exptime)</span><br><span class="line">        <span class="keyword">return</span> succ</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function get_from_cache(key)</span><br><span class="line">        local ngx_cache = ngx.shared.ngx_cache;</span><br><span class="line">        local value = ngx_cache:get(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value then</span><br><span class="line">                value = get_from_redis(key)</span><br><span class="line">                set_to_cache(key, value)</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        ngx.say(<span class="string">"get from cache."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function get_from_redis(key)</span><br><span class="line">        red:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        local ok, err = red:connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        local res, err = red:get(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res then</span><br><span class="line">                ngx.say(<span class="string">"failed to get doy: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span> ngx.null</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        ngx.say(<span class="string">"get from redis."</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function set_to_redis(key, value)</span><br><span class="line">        red:set_timeout(<span class="number">1000</span>)</span><br><span class="line">        local ok, err = red:connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        local ok, err = red:<span class="built_in">set</span>(key, value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to set to redis: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">return</span> ok</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">set_to_redis('dog', "Bob")</span><br><span class="line">local rs = get_from_cache('dog')</span><br><span class="line">ngx.say(rs)</span><br></pre></td></tr></table></figure><p>可以使用 ab 测试一下rps(Requests per second):</p><p> ab -n 1000 -c 100 -k <a href="http://127.0.0.1/cache" target="_blank" rel="noopener">http://127.0.0.1/cache</a></p><h2 id="6-解决缓存失效风暴-lua-resty-lock"><a href="#6-解决缓存失效风暴-lua-resty-lock" class="headerlink" title="6.解决缓存失效风暴 lua-resty-lock"></a>6.解决缓存失效风暴 lua-resty-lock</h2><p>缓存失效风暴是指缓存因为时间过期而失效时，会导致所有的请求都去访问 后台的redis或者mysql，而导致CPU性能即刻增长的现象。所以关键是当缓存失效时，用lock保证只有一个线程去访问后台的redis或者mysql，然后更新缓存。需要使用到 lua-resty-lock 模块的加锁、解锁功能。</p><p>首先在nginx.conf 的 http 端下面加入指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict ngx_cache 128m;     # cache</span><br><span class="line">lua_shared_dict cache_lock 100k;    # lock for cache</span><br></pre></td></tr></table></figure><p>然后在nginx.conf的server端中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /cache_lock &#123;</span><br><span class="line">    content_by_lua_file lua/cache_lock.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cache_lock.lua代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lua]<span class="meta"># cat cache_lock.lua</span></span><br><span class="line">local redis = require <span class="string">"resty.redis"</span></span><br><span class="line">local red = redis:<span class="keyword">new</span>()</span><br><span class="line">local resty_lock = require <span class="string">"resty.lock"</span></span><br><span class="line">local ngx_cache = ngx.shared.ngx_cache</span><br><span class="line"></span><br><span class="line">function set_to_cache(key, value, exptime)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exptime then</span><br><span class="line">                exptime = <span class="number">0</span></span><br><span class="line">        end</span><br><span class="line">        local succ, err, forcible = ngx_cache:<span class="built_in">set</span>(key, value, exptime)</span><br><span class="line">        <span class="keyword">return</span> succ</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function get_from_cache(key)</span><br><span class="line">        local ngx_cache = ngx.shared.ngx_cache;</span><br><span class="line">        local value = ngx_cache:get(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> value then       -- cache miss</span><br><span class="line">                local lock = resty_lock:<span class="keyword">new</span>(<span class="string">"cache_lock"</span>)</span><br><span class="line">                local elapsed, err = lock:lock(key)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> elapsed then</span><br><span class="line">                        <span class="keyword">return</span> fail(<span class="string">"failed to acquire the lock: "</span>, err)</span><br><span class="line">                end</span><br><span class="line"></span><br><span class="line">                value = get_from_redis(key)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> value then</span><br><span class="line">                        local ok, err = lock:unlock()</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                                <span class="keyword">return</span> fail(<span class="string">"failed to unlock: "</span>, err)</span><br><span class="line">                        end</span><br><span class="line">                        ngx.say(<span class="string">"no value found"</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                end</span><br><span class="line"></span><br><span class="line">                local ok, err = ngx_cache:<span class="built_in">set</span>(key, value, <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                        local ok, err = lock:unlock()</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                                <span class="keyword">return</span> fail(<span class="string">"failed to unlock: "</span>, err)</span><br><span class="line">                        end</span><br><span class="line">                        <span class="keyword">return</span> faile(<span class="string">"failed to update ngx_cache: "</span>, err)</span><br><span class="line">                end</span><br><span class="line"></span><br><span class="line">                local ok, err = lock:unlock()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                        <span class="keyword">return</span> faile(<span class="string">"failed to unlock: "</span>, err)</span><br><span class="line">                end</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        ngx.say(<span class="string">"get from cache."</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function get_from_redis(key)</span><br><span class="line">        red:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        local ok, err = red:connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        local res, err = red:get(key)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res then</span><br><span class="line">                ngx.say(<span class="string">"failed to get doy: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span> ngx.null</span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        ngx.say(<span class="string">"get from redis."</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">function set_to_redis(key, value)</span><br><span class="line">        red:set_timeout(<span class="number">1000</span>)</span><br><span class="line">        local ok, err = red:connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to connect: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line"></span><br><span class="line">        local ok, err = red:<span class="built_in">set</span>(key, value)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok then</span><br><span class="line">                ngx.say(<span class="string">"failed to set to redis: "</span>, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">return</span> ok</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">set_to_redis('dog', "Bob")</span><br><span class="line">local rs = get_from_cache('dog')</span><br><span class="line">ngx.say(rs)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx学习笔记-二&quot;&gt;&lt;a href=&quot;#nginx学习笔记-二&quot; class=&quot;headerlink&quot; title=&quot;nginx学习笔记  (二)&quot;&gt;&lt;/a&gt;&lt;code&gt;nginx&lt;/code&gt;学习笔记  (二)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;时钟
      
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习笔记（—）</title>
    <link href="http://yoursite.com/2020/03/24/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E2%80%94%EF%BC%89.html"/>
    <id>http://yoursite.com/2020/03/24/nginx学习笔记（—）.html</id>
    <published>2020-03-24T15:55:09.000Z</published>
    <updated>2020-03-24T16:34:31.019Z</updated>
    
    <content type="html"><![CDATA[<p>一个好人加入了战争，恶魔将会逃跑，上帝也会留下眼泪</p><p>1.nginx主要学习的是配置文件</p><p>首先说下正向代理与反向代理</p><p>正向代理：比如我们想要访问国外的网站，我们不知道怎么到达，可以让代理服务器帮助，此时服务器只清楚请求来自哪个代理服务器，而不清楚具体请求者，而我们很明确的知道要访问谁</p><p>反向代理：就是分布式，我们访问具体的网站却不知具体的服务器以为被代理到分布的一台机器上啦</p><pre><code>#运行用户user nobody;#启动进程,通常设置成和cpu的数量相等worker_processes  1;&gt;&gt;nginx 主要核心模块俗称的main区#全局错误日志及PID文件#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;#工作模式及连接数上限events { #events区    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,    #仅用于linux2.6以上内核,可以大大提高nginx的性能    use   epoll;     #单个后台worker process进程的最大并发链接数        worker_connections  1024;    # 并发总数是 worker_processes 和 worker_connections 的乘积    # 即 max_clients = worker_processes * worker_connections    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么    # 为什么上面反向代理要除以4，应该说是一个经验值    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000    #说明这里的8000指线程 4是进程    # worker_connections 值的设置跟物理内存大小有关    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：    # $ cat /proc/sys/fs/file-max    # 输出 34336    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置    # 使得并发总数小于操作系统可以打开的最大文件数目    # 其实质也就是根据主机的物理CPU和内存进行配置    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。    # ulimit -SHn 65535}http {    #设定mime类型,类型由mime.type文件定义    include    mime.types; &gt;这是引入    default_type  application/octet-stream;    #设定日志格式    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;    access_log  logs/access.log  main;    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，    #对于普通应用，必须设为 on,    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.    sendfile     on;    #tcp_nopush     on;    #连接超时时间    #keepalive_timeout  0;    keepalive_timeout  65;    tcp_nodelay     on;    #开启gzip压缩    gzip  on;    gzip_disable &quot;MSIE [1-6].&quot;;    #设定请求缓冲    client_header_buffer_size    128k;    large_client_header_buffers  4 128k;    #设定虚拟主机配置    server {        #侦听80端口        listen    80;        #定义使用 www.nginx.cn访问        server_name  www.nginx.cn;        #定义服务器的默认网站根目录位置        root html;        #设定本虚拟主机的访问日志        access_log  logs/nginx.access.log  main;        #默认请求        location / {            #定义首页索引文件的名称            index index.php index.html index.htm;           }        # 定义错误提示页面        error_page   500 502 503 504 /50x.html;        location = /50x.html {        }        #静态文件，nginx自己处理        location ~ ^/(images|javascript|js|css|flash|media|static)/ {            #过期30天，静态文件不怎么更新，过期可以设大一点，            #如果频繁更新，则可以设置得小一点。            expires 30d;        }        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.        location ~ .php$ {            fastcgi_pass 127.0.0.1:9000;            fastcgi_index index.php;            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;            include fastcgi_params;        }        #禁止访问 .htxxx 文件            location ~ /.ht {            deny all;        }    }}</code></pre><p>机会总是留给那些有准备的人</p><p>2.nginx命令</p><p>nginx命令行参数</p><p>  命令                 说明<br>  -p prefix          设置 nginx prefix 路径，这是存储 nginx 服务文件的路径，默认为 /etc/nginx<br>  -c filename        不使用默认配置文件，使用指定的配置文件(default: /etc/nginx/nginx.conf)<br>  nginx              启动命令<br>  nginx -s stop      快速关闭 nginx<br>  nginx -s quit      优雅的关闭 nginx<br>  nginx -s reload    重新加载配置<br>  nginx -s reopen    重新打开日志文件<br>  nginx  -t          检查配置文件                                  </p><p>关于关闭进程补充一下linux进程知识 以nginx为例</p><p>ps -ef |grep nginx 找到进程然后 kill -9 进程号</p><p>netstat -ntlp  #查看当前所有tcp端口·</p><p>netstat -ntulp |grep 80 #查所有80端口的使用情况</p><p>ps aux | egrep ‘(PID|nginx)’ kill -15 pid #中止</p><p>也可以临时指定，支持热部署</p><p>总之岁月漫长，然而值得等待</p><p>3.upstream负载均衡块</p><p>Nginx的 HttpUpstreamModule提供对后端（backend）服务器的简单负载均衡。一个最简单的 upstream 写法如下：</p><pre><code>  upstream backend {    server backend1.example.com;    server backend2.example.com;    server backend3.example.com;}server {    location / {        proxy_pass http://backend;    }}</code></pre><ol><li><p>通过 upstream 可以设定后端服务器，指定的方式可以是 IP 地址与端口、域名、UNIX 套接字（socket）。其中如果域名可以被解析为多个地址，则这些地址都作为 backend。下面举例说明</p><p>  upstream backend {</p><pre><code> server blog.csdn.net/poechant; server 145.223.156.89:8090; server unix:/tmp/backend3;</code></pre><p> }</p></li><li><p>负载均衡策略<br>默认情况下，Nginx 会为你提供轮询作为负载均衡策略。但是这并不一定能够让你满意。比如，某一时段内的一连串访问都是由同一个用户 Michael 发起的，那么第一次 Michael 的请求可能是 backend2，<br>而下一次是 backend3，然后是 backend1、backend2、backend3…… 在大多数应用场景中，这样并不高效。当然，也正因如此，<br>Nginx 为你提供了一个按照 Michael、Jason、David 等等这些乱七八糟的用户的 IP 来 hash 的方式，<br>这样每个 client 的访问请求都会被甩给同一个后端服务器。具体的使用方式如下：</p></li></ol><pre><code>upstream backend {    server blog.csdn.net/poechant down;    server 145.223.156.89:8090;    server unix:/tmp/backend3;} </code></pre><p>还可以使用指定权重（weight）的方式，如下：</p><pre><code> upstream backend {    server backend1.example.com;    server 123.321.123.321:456 weight=4;} </code></pre><p>默认情况下 weight 为 1，对于上面的例子，第一个 server 的权重取默认值 1，第二个是 4，所以相当于第一个 server 接收 20% 的请求，第二接收 80% 的。要注意的是 weight 与 ip_hash 是不能同时使用的，原因很简单，他们是不同且彼此冲突的策略</p><p>url_hash（第三方）</p><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><p>注意：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法。</p><pre><code>upstream resinserver{       server 10.0.0.10:7777;       server 10.0.0.11:8888;       hash $request_uri;       hash_method crc32; }</code></pre><p>pstream还可以为每个设备设置状态值，这些状态值的含义分别如下：</p><p>down 表示单前的server暂时不参与负载.</p><p>weight 默认为1.weight越大，负载的权重就越大。</p><p>max_fails ：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream 模块定义的错误.</p><p>fail_timeout : max_fails次失败后，暂停的时间。</p><p>backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</p><ol><li>重试策略</li></ol><p>可以为每个 backend 指定最大的重试次数，和重试时间间隔。所使用的关键字是 max_fails 和 fail_timeout。如下所示：</p><pre><code>upstream backend {server backend1.example.com weight=5;server 54.244.56.3:8081 max_fails=3 fail_timeout=30s;} </code></pre><p>在上例中，最大失败次数为 3，也就是最多进行 3 次尝试，且超时时间为 30秒。max_fails 的默认值为 1，fail_timeout 的默认值是 10s。传输失败的情形，由 proxy_next_upstream 或 fastcgi_next_upstream 指定。而且可以使用 proxy_connect_timeout 和 proxy_read_timeout 控制 upstream 响应时间。</p><p>有一种情况需要注意，就是 upstream 中只有一个 server 时，max_fails 和 fail_timeout 参数可能不会起作用。导致的问题就是 nginx 只会尝试一次 upstream 请求，如果失败这个请求就被抛弃了 : ( ……解决的方法，比较取巧，就是在 upstream 中将你这个可怜的唯一 server 多写几次，如下：</p><pre><code>upstream backend {server backend.example.com max_fails fail_timeout=30s;server backend.example.com max_fails fail_timeout=30s;server backend.example.com max_fails fail_timeout=30s;} </code></pre><ol><li>备机策略</li></ol><p>从 Nginx 的 0.6.7 版本开始，可以使用“backup”关键字。当所有的非备机（non-backup）都宕机（down）或者繁忙（busy）的时候，就只使用由 backup 标注的备机。必须要注意的是，backup 不能和 ip_hash 关键字一起使用。举例如下：</p><pre><code>upstream backend {server backend1.example.com;server backend2.example.com backup;server backend3.example.com;}</code></pre><p>4.localtion指令详解</p><pre><code>Nginx的HTTP配置主要包括三个区块，结构如下：http { //这个是协议级别　　include mime.types;　　default_type application/octet-stream;　　keepalive_timeout 65;　　gzip on;　　　　server { //这个是服务器级别　　　　　　listen 80;　　　　　　server_name localhost;　　　　　　　　location / { //这个是请求级别　　　　　　　　　　root html;　　　　　　　　　　index index.html index.htm;　　　　　　　　}　　　　　　}}</code></pre><p>location区段</p><p>通过指定模式来与客户端请求的URI相匹配，基本语法如下：location [=|~|~*|^~|@] pattern{……}</p><p>1、没有修饰符 表示：必须以指定模式开始，如：</p><pre><code>server {　　server_name baidu.com;　　location /abc {　　　　……　　}}那么，如下是对的：http://baidu.com/abchttp://baidu.com/abc?p1http://baidu.com/abc/http://baidu.com/abcde</code></pre><p>2、=表示：必须与指定的模式精确匹配</p><pre><code>server {server_name sish　　location = /abc {　　　　……　　}}那么，如下是对的：http://baidu.com/abchttp://baidu.com/abc?p1如下是错的：http://baidu.com/abc/http://baidu.com/abcde</code></pre><p>3、~ 表示：指定的正则表达式要区分大小写</p><pre><code>server {server_name baidu.com;　　location ~ ^/abc$ {　　　　……　　}}那么，如下是对的：http://baidu.com/abchttp://baidu.com/abc?p1=11&amp;p2=22如下是错的：http://baidu.com/ABChttp://baidu.com/abc/http://baidu.com/abcde</code></pre><p>4、~* 表示：指定的正则表达式不区分大小写</p><pre><code>server {server_name baidu.com;location ~* ^/abc$ {　　　　……　　}}那么，如下是对的：http://baidu.com/abchttp://baidu..com/ABChttp://baidu..com/abc?p1=11&amp;p2=22如下是错的：http://baidu..com/abc/http://baidu..com/abcde</code></pre><p>5、^~ 类似于无修饰符的行为，也是以指定模式开始，不同的是，如果模式匹配，<br>那么就停止搜索其他模式了。<br>6、@ ：定义命名location区段，这些区段客户段不能访问，只可以由内部产生的请<br>求来访问，如try_files或error_page等</p><pre><code>location  = / {  # 只匹配请求 &quot;/&quot;  [ configuration A ] }location  / {  # 匹配任何请求，因为所有请求都是以&quot;/&quot;开始  # 但是更长字符匹配或者正则表达式匹配会优先匹配  [ configuration B ] }location /documents/ {  # 匹配所有 /documents/ 开头的请求，在没有正则表达  # 式匹配时选择该locaiton  [ configuration C ]}location ^~ /images/ {  # 匹配任何以 /images/ 开始的请求，并停止匹配其它location  [ configuration D ] }Elocation ~* .(gif|jpg|jpeg)$ {  # 匹配以 gif, jpg, or jpeg结尾的请求.   # 但是所有 /images/ 目录的请求将由 [Configuration D]处理.     [ configuration E ] }请求URI例子:/ -&gt; 匹配A/index.html -&gt; 匹配B/documents/a.html -&gt; 匹配C/images/1.gif -&gt; 匹配D/documents/1.jpg -&gt; 匹配E</code></pre><p>查找顺序和优先级<br>1：带有“=“的精确匹配优先<br>2：没有修饰符的精确匹配<br>3：正则表达式按照他们在配置文件中定义的顺序<br>4：带有“^~”修饰符的，开头匹配<br>5：带有“~” 或“~*” 修饰符的，如果正则表达式与URI匹配<br>6：没有修饰符的，如果指定字符串与URI开头匹配</p><p>root 、alias指令区别</p><pre><code>location /img/ {    alias /var/www/image/;}#若按照上述配置的话，则访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件location /img/ {    root /var/www/image;}若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。] </code></pre><p>alias是一个目录别名的定义，root则是最上层目录的定义。</p><p>还有一个重要的区别是alias后面必须要用“/”结束，否则会找不到文件的。。。而root则可有可无~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个好人加入了战争，恶魔将会逃跑，上帝也会留下眼泪&lt;/p&gt;
&lt;p&gt;1.nginx主要学习的是配置文件&lt;/p&gt;
&lt;p&gt;首先说下正向代理与反向代理&lt;/p&gt;
&lt;p&gt;正向代理：比如我们想要访问国外的网站，我们不知道怎么到达，可以让代理服务器帮助，此时服务器只清楚请求来自哪个代理服务
      
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>春来</title>
    <link href="http://yoursite.com/2020/03/24/%E6%98%A5%E6%9D%A5.html"/>
    <id>http://yoursite.com/2020/03/24/春来.html</id>
    <published>2020-03-23T16:36:15.000Z</published>
    <updated>2020-03-23T17:22:55.763Z</updated>
    
    <content type="html"><![CDATA[<p>北方大雪纷飞，南国大雨连绵。果真是，往昔不可追，时令不可违。</p><p>《道德经》有句：“飘风不终朝，骤雨不终日。”天地万物皆有其规律，开落有序，荣枯有定。当下的雨雪，以及灾事，亦是不能久长。</p><p>“春日迟迟，采蘩祁祁。”这个春天，虽然来得缓慢，却会如约而至。且比之从前任何一个春天，更加令人期待，温暖有情。</p><p>那时的人间，杏雨梨云，群莺乱飞。满目春光，无人做主。而我，也该归去梅庄，剪枝插瓶，春水煎茶。</p><p>封城已有半月余，等待成了信仰。这一年，许多人的命运被改写，但都学会了坦然以待。而我，有一壶酒，一盏茶，足矣消闷解烦。任凭世事飞沙走石，我自是风雨不动，慌乱不惊。</p><p>“蜉蝣之羽，衣裳楚楚。心之忧矣，于我归处？”说不劳神忧心，是虚话。想当年杜工部忧国忧民，生出“安得广厦千万间，大庇天下寒士俱欢颜”之叹。我虽薄弱，却亦有此心。</p><p>太湖水畔的山庄，也为此搁浅，等候时光给予美妙的安排。往后余生，归去林泉，种菜伺花，无可更改。愿有一畦菜地，供养苍生，几片瓦当，庇护万民。</p><p>寸阴可贵，一刻千金。静下来的时候，许多人对生命有了新的认知，对未知的将来，重新有了念想。不再执迷，亦不抱怨，因为浩浩荡荡的一辈子，有无数的风雨消磨，我们要活得心安境宽，有情有味。</p><p>无论光阴几何，人的一生，终要做一件比生命，更为宏伟的事业。过些时日，我又该生火炙茶，采花酿酒，读书养气，写字谋生。</p><p>世上的人，都有来时，亦有归处。有人愿化身石桥，受五百年的风吹日晒雨淋，只为一人打桥上经过。</p><p>而我，愿做驿外断桥边的一株白梅，若人世的一剪清光，照彻凡尘每一个悲伤、迷惘的路人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;北方大雪纷飞，南国大雨连绵。果真是，往昔不可追，时令不可违。&lt;/p&gt;
&lt;p&gt;《道德经》有句：“飘风不终朝，骤雨不终日。”天地万物皆有其规律，开落有序，荣枯有定。当下的雨雪，以及灾事，亦是不能久长。&lt;/p&gt;
&lt;p&gt;“春日迟迟，采蘩祁祁。”这个春天，虽然来得缓慢，却会如约而至。
      
    
    </summary>
    
      <category term="心情" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="美文" scheme="http://yoursite.com/tags/%E7%BE%8E%E6%96%87/"/>
    
  </entry>
  
</feed>
